// configurations
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// tables

// unit_categories
model Unit_Categories {
  unit_category_id   String   @id @db.VarChar(6)
  unit_category_name String   @db.VarChar(10)
  status             String   @default("සක්‍රීය")
  default_status     String   @db.VarChar(12)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  units Units[] @relation("UnitCategoryRelation")
}

model ItemCategoryUnit {
  id               String   @id @default(uuid()) @db.VarChar(36)
  item_category_id String   @db.VarChar(6)
  unit_id          String   @db.VarChar(7)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  default_status   String   @default("අවශ්‍ය")

  itemCategory    Item_Categories   @relation(fields: [item_category_id], references: [category_id])
  unit            Units             @relation(fields: [unit_id], references: [unit_id])
  Units           Units[]           @relation("CategoryUnitRelation")
  Item_Categories Item_Categories[] @relation("CategoryUnitRelation")

  @@unique([item_category_id, unit_id]) // Unique constraint to prevent duplicate pairs
}

// Update the Units model to reference the new relationship
model Units {
  unit_id          String   @id @db.VarChar(7)
  unit_name        String   @db.VarChar(50)
  abbreviation     String   @db.VarChar(10)
  status           String   @default("සක්‍රීය")
  unit_category_id String   @db.VarChar(6)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  unitCategory        Unit_Categories    @relation("UnitCategoryRelation", fields: [unit_category_id], references: [unit_category_id])
  unitConversionsFrom Unit_Conversions[] @relation("FromUnit")
  unitConversionsTo   Unit_Conversions[] @relation("ToUnit")
  itemCategories      ItemCategoryUnit[] @relation("CategoryUnitRelation") // Reference to join table

  ItemCategoryUnit ItemCategoryUnit[]
}

// unit_conversions
model Unit_Conversions {
  conversion_id String   @id @db.VarChar(8)
  from_unit     String   @db.VarChar(10)
  value         Float
  status        String   @default("සක්‍රීය")
  to_unit       String   @db.VarChar(10)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  UnitFrom Units @relation("FromUnit", fields: [from_unit], references: [unit_id])
  UnitTo   Units @relation("ToUnit", fields: [to_unit], references: [unit_id])
}

// items
model Items {
  item_id          String   @id @db.VarChar(10)
  item_name        String   @db.VarChar(50)
  item_category_id String   @db.VarChar(6)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  itemCategory Item_Categories? @relation("ItemCategory", fields: [item_category_id], references: [category_id])

  stocks Stocks[] @relation("ItemStockRelation")

  @@index([item_category_id])
}

// Update the Item_Categories model to reference the new relationship
model Item_Categories {
  category_id   String   @id @db.VarChar(6)
  category_name String   @db.VarChar(30)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  itemCategoryItems Items[]            @relation("ItemCategory")
  units             ItemCategoryUnit[] @relation("CategoryUnitRelation")

  ItemCategoryUnit ItemCategoryUnit[]
}

// stocks
model Stocks {
  stock_id         String   @id @db.VarChar(10)
  total_quantity   Int      @db.Int
  damaged_quantity Int      @db.Int
  sold_quantity    Int      @db.Int
  item_id          String   @db.VarChar(10)
  buying_date      DateTime @db.Date
  buying_price     Float
  selling_price    Float
  barcode_url      String   @db.VarChar(20)
  supplier_id      String   @db.VarChar(8)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  item     Items     @relation("ItemStockRelation", fields: [item_id], references: [item_id])
  supplier Suppliers @relation("SupplierStockRelation", fields: [supplier_id], references: [supplier_id])

  billStocks     BillStocks[]     @relation("StockBillRelation")
  Returned_Items Returned_Items[]

  @@index([item_id])
  @@index([supplier_id])
}

// suppliers
model Suppliers {
  supplier_id   String   @id @db.VarChar(8)
  supplier_name String   @db.VarChar(50)
  email         String   @db.VarChar(100)
  phone         Int      @db.Int
  address       String   @db.VarChar(200)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  stocks Stocks[] @relation("SupplierStockRelation")

  @@index([supplier_id])
}

// bills
model Bills {
  bill_id          String   @id @db.VarChar(10)
  bill_date        DateTime @db.Date
  barcode_url      String   @db.VarChar(20)
  sub_total_amount Float
  discount_amount  Float
  returned_amount  Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  billStocks     BillStocks[]     @relation("BillStockRelation")
  Returned_Items Returned_Items[]

  @@index([bill_date])
}

// bill_stocks
model BillStocks {
  bill_id   String
  stock_id  String
  quantity  Int      @db.Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  bill  Bills  @relation("BillStockRelation", fields: [bill_id], references: [bill_id])
  stock Stocks @relation("StockBillRelation", fields: [stock_id], references: [stock_id])

  @@id([bill_id, stock_id])
}

// returned_items
model Returned_Items {
  returned_id       String   @id @default(uuid()) @db.VarChar(10)
  returned_date     DateTime @db.Date
  returned_quantity Int      @db.Int
  reason            String   @db.VarChar(255)
  bill_id           String
  stock_id          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  bill  Bills  @relation(fields: [bill_id], references: [bill_id])
  stock Stocks @relation(fields: [stock_id], references: [stock_id])

  @@index([bill_id])
  @@index([stock_id])
}
